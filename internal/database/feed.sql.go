// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds(id, created_at, updated_at, last_fetched_at, name, url, user_id)
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, last_fetched_at, name, url, user_id
`

type CreateFeedParams struct {
	ID            string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	Name          string
	Url           string
	UserID        string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.LastFetchedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :one
SELECT id, created_at, updated_at, last_fetched_at, name, url, user_id 
FROM feeds
WHERE name = $1
`

func (q *Queries) GetFeed(ctx context.Context, name string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, name)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, created_at, updated_at, last_fetched_at, name, url, user_id
FROM feeds
WHERE URL = $1
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT feeds.url
FROM feeds
ORDER by last_fetched_at ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var url string
	err := row.Scan(&url)
	return url, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds
SET feeds.updated_at = NOW(), feeds.last_fetched_at = NOW()
WHERE feeds.id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}

const pprint = `-- name: Pprint :many
SELECT feeds.name, feeds.url, users.name as username
FROM feeds
INNER JOIN users
ON feeds.user_id = users.id
`

type PprintRow struct {
	Name     string
	Url      string
	Username string
}

func (q *Queries) Pprint(ctx context.Context) ([]PprintRow, error) {
	rows, err := q.db.QueryContext(ctx, pprint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PprintRow
	for rows.Next() {
		var i PprintRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
